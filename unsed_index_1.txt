--http://msdn.microsoft.com/en-us/library/ee377058(v=bts.10).aspx
---------------------------------------
--------TODOS BDS ---------------------
-------Rafael Dontal Goncalez ---------
-------21-08-2013---v.2----------------
---------------------------------------
sp_foreachdb @command = 'USE ?
IF DB_NAME() NOT IN(''master'',''model'',''msdb'',''tempdb'',''t4bdb01'')
BEGIN
;WITH cte AS (
    SELECT     	''USE '' + DB_NAME(database_id) + CHAR(10) + 
				''GO'' +	CHAR(10) +
    			''DROP INDEX '' + QUOTENAME(i.name) 
    		+ '' ON '' + QUOTENAME(c.name) 
    		+ ''.'' + QUOTENAME(OBJECT_NAME(s.object_id)) + CHAR(10) + 
				''GO'' +	CHAR(10)
    		AS ''DropSQL'',
		DB_NAME(s.database_id) as [database],
		''[''+ c.name + ''].['' + o.name + '']'' AS TableName,
    	i.name AS IndexName,
    	(
    		SELECT SUM(ps.[used_page_count]) * 8 
    		FROM sys.dm_db_partition_stats ps 
    		where ps.[object_id] = i.[object_id] AND ps.[index_id] = i.[index_id] 
		)   as Index_size,
    	s.user_scans as u_scans,
    	s.user_seeks as u_seeks,
    	s.user_lookups as u_lookups,
    	s.user_updates as u_updates,
    	s.last_user_scan as last_scan,
    	s.last_user_seek as last_seek,
    	s.last_user_update as last_update,
    	
    	(
    		SELECT SUM(p.rows) 
    		FROM sys.partitions p 
    		WHERE p.index_id = s.index_id 
    			AND s.object_id = p.object_id
    	) AS TotalRows,
    	i.index_id AS IndexID,   
    	user_seeks + user_scans + user_lookups AS Reads,
    	user_updates AS Writes

    	/*CASE
    		WHEN s.user_updates < 1 THEN 100
    		ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) 
    			/ s.user_updates
    	END AS ReadsPerWrite,*/
    FROM sys.dm_db_index_usage_stats s  
    INNER JOIN sys.indexes i ON i.index_id = s.index_id 
			AND s.object_id = i.object_id   
    INNER JOIN sys.objects o on s.object_id = o.object_id
    INNER JOIN sys.schemas c on o.schema_id = c.schema_id
    WHERE i.is_primary_key = 0
    	AND s.database_id = DB_ID()   
    	AND i.type_desc = ''nonclustered''
    	AND OBJECTPROPERTY(s.object_id,''IsUserTable'') = 1
    	AND i.is_unique_constraint = 0
		AND 
		(
    	SELECT SUM(p.rows) 
    	FROM sys.partitions p 
    	WHERE p.index_id = s.index_id 
    		AND s.object_id = p.object_id
		) > 10000
)
SELECT * FROM cte
where u_seeks <= 10
and u_scans <= 10
and u_lookups <= 10
order by u_updates desc
END'




--------------------------
-----------Rafael Goncalez
--------------------------
IF DB_NAME() NOT IN('master','model','msdb','tempdb','t4bdb01')
BEGIN
;WITH cte AS (
    SELECT     	'USE ' + DB_NAME(database_id) + CHAR(10) + 
				'GO' +	CHAR(10) +
    			'DROP INDEX ' + QUOTENAME(i.name) 
    		+ ' ON ' + QUOTENAME(c.name) 
    		+ '.' + QUOTENAME(OBJECT_NAME(s.object_id)) + CHAR(10) + 
				'GO' +	CHAR(10)
    		AS 'DropSQL',
		DB_NAME(s.database_id) as [database],
		'['+ c.name + '].[' + o.name + ']' AS TableName,
    	i.name AS IndexName,
    	(
    		SELECT SUM(ps.[used_page_count]) * 8 
    		FROM sys.dm_db_partition_stats ps 
    		where ps.[object_id] = i.[object_id] AND ps.[index_id] = i.[index_id] 
		)   as Index_size,
    	s.user_scans as u_scans,
    	s.user_seeks as u_seeks,
    	s.user_lookups as u_lookups,
    	s.user_updates as u_updates,
    	s.last_user_scan as last_scan,
    	s.last_user_seek as last_seek,
    	s.last_user_update as last_update,
    	(
    		SELECT SUM(p.rows) 
    		FROM sys.partitions p 
    		WHERE p.index_id = s.index_id 
    			AND s.object_id = p.object_id
    	) AS TotalRows,
    	i.index_id AS IndexID,   
    	user_seeks + user_scans + user_lookups AS Reads,
    	user_updates AS Writes

    	/*CASE
    		WHEN s.user_updates < 1 THEN 100
    		ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) 
    			/ s.user_updates
    	END AS ReadsPerWrite,*/
    FROM sys.dm_db_index_usage_stats s  
    INNER JOIN sys.indexes i ON i.index_id = s.index_id 
			AND s.object_id = i.object_id   
    INNER JOIN sys.objects o on s.object_id = o.object_id
    INNER JOIN sys.schemas c on o.schema_id = c.schema_id
    WHERE i.is_primary_key = 0
    	AND s.database_id = DB_ID()   
    	AND i.type_desc = 'nonclustered'
    	AND OBJECTPROPERTY(s.object_id,'IsUserTable') = 1
    	AND i.is_unique_constraint = 0
		AND 
		(
    	SELECT SUM(p.rows) 
    	FROM sys.partitions p 
    	WHERE p.index_id = s.index_id 
    		AND s.object_id = p.object_id
		) > 10000
)
SELECT * FROM cte
where u_seeks <= 10
and u_scans <= 10
and u_lookups <= 10
order by u_updates desc
END

/*
TableName   Name  ID Reads   Writes Rows  ReadsPerWrite DropSQL
----------  ----- -- ------- ------ ----- ------------- -------
[dbo].[t1]  IDX_1 20 1227972 996081 78599 1.23280335635 DROP ..
[dbo].[t2]  IDX_2 21 51359   33912  78599 1.51447865062 DROP ..
[dbo].[t3]  IDX_3 22 235280  159808 78599 1.47226672006 DROP ..
*/



------------
-- script 1
------------

WITH cte AS (
    SELECT     	DB_NAME(s.database_id) as [database],
		'['+ c.name + '].[' + o.name + ']' AS TableName,
    	i.name AS IndexName,
    	s.user_scans as u_scans,
    	s.user_seeks as u_seeks,
    	s.user_lookups as u_lookups,
    	s.user_updates as u_updates,
    	s.last_user_scan as last_scan,
    	s.last_user_seek as last_seek,
    	s.last_user_update as last_update,
    	i.index_id AS IndexID,   
    	user_seeks + user_scans + user_lookups AS Reads,
    	user_updates AS Writes,

    	(
    		SELECT SUM(p.rows) 
    		FROM sys.partitions p 
    		WHERE p.index_id = s.index_id 
    			AND s.object_id = p.object_id
    	) AS TotalRows,
    	/*CASE
    		WHEN s.user_updates < 1 THEN 100
    		ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) 
    			/ s.user_updates
    	END AS ReadsPerWrite,*/
    	'DROP INDEX ' + QUOTENAME(i.name) 
    		+ ' ON ' + QUOTENAME(c.name) 
    		+ '.' + QUOTENAME(OBJECT_NAME(s.object_id)) 
    		AS 'DropSQL' 
    FROM sys.dm_db_index_usage_stats s  
    INNER JOIN sys.indexes i ON i.index_id = s.index_id 
			AND s.object_id = i.object_id   
    INNER JOIN sys.objects o on s.object_id = o.object_id
    INNER JOIN sys.schemas c on o.schema_id = c.schema_id
    WHERE i.is_primary_key = 0
    	AND s.database_id = DB_ID()   
    	AND i.type_desc = 'nonclustered'
    	AND OBJECTPROPERTY(s.object_id,'IsUserTable') = 1
    	AND i.is_unique_constraint = 0
		AND 
		(
    	SELECT SUM(p.rows) 
    	FROM sys.partitions p 
    	WHERE p.index_id = s.index_id 
    		AND s.object_id = p.object_id
		) > 10000
)
SELECT * FROM cte
where u_seeks <= 10
and u_scans <= 10
and u_lookups <= 10
order by u_updates desc
/*
TableName   Name  ID Reads   Writes Rows  ReadsPerWrite DropSQL
----------  ----- -- ------- ------ ----- ------------- -------
[dbo].[t1]  IDX_1 20 1227972 996081 78599 1.23280335635 DROP ..
[dbo].[t2]  IDX_2 21 51359   33912  78599 1.51447865062 DROP ..
[dbo].[t3]  IDX_3 22 235280  159808 78599 1.47226672006 DROP ..
*/
------------
--- script2
------------

USE [DatabaseName]

DECLARE @MinimumPageCount int
SET @MinimumPageCount = 500

DECLARE @dbid INT
SELECT @dbid = DB_ID(DB_NAME())

-- GET UNUSED INDEXES THAT APPEAR IN THE INDEX USAGE STATS TABLE

SELECT  
    Databases.name AS [Database]
    ,object_name(Indexes.object_id) AS [Table]
    ,Indexes.name AS [Index]
    ,PhysicalStats.page_count as [Page Count]
    ,CONVERT(decimal(18,2), PhysicalStats.page_count * 8 / 1024.0) AS [Total Index Size (MB)]
    ,CONVERT(decimal(18,2), PhysicalStats.avg_fragmentation_in_percent) AS [Fragmentation (%)]
    ,ParititionStats.row_count AS [Row Count]
    ,CONVERT(decimal(18,2), (PhysicalStats.page_count * 8.0 * 1024) / ParititionStats.row_count) AS [Index Size Per Row (Bytes)]
    ,1 AS [Appears In Usage Stats Table]

FROM sys.dm_db_index_usage_stats UsageStats

INNER JOIN sys.indexes Indexes
    ON Indexes.index_id = UsageStats.index_id AND Indexes.object_id = UsageStats.object_id

INNER JOIN SYS.databases Databases
    ON Databases.database_id = UsageStats.database_id

INNER JOIN sys.dm_db_index_physical_stats (DB_ID(),NULL,NULL,NULL,NULL) AS PhysicalStats
    ON PhysicalStats.index_id = UsageStats.Index_id AND PhysicalStats.object_id = UsageStats.object_id

INNER JOIN SYS.dm_db_partition_stats ParititionStats
    ON ParititionStats.index_id = UsageStats.index_id AND ParititionStats.object_id = UsageStats.object_id

WHERE 
    UsageStats.user_scans <= 10
    AND UsageStats.user_seeks <= 10
    AND UsageStats.user_lookups <= 10

    -- exclude heap indexes
    AND Indexes.name IS NOT NULL

    -- ignore indexes with less than a certain number of pages of memory
    AND PhysicalStats.page_count > @MinimumPageCount

    -- Exclude primary keys, which should not be removed
    AND Indexes.is_primary_key = 0

    -- ignore unique constraints - those shouldn't be removed 
    AND Indexes.is_unique_constraint = 0 
    AND Indexes.is_unique = 0

UNION ALL 
(
    -- GET UNUSED INDEXES THAT DO **NOT** APPEAR IN THE INDEX USAGE STATS TABLE

    SELECT  
        Databases.Name AS [Database]
        ,Objects.NAME AS [Table]
        ,Indexes.NAME AS [Index]
        ,PhysicalStats.page_count as [Page Count]
        ,CONVERT(decimal(18,2), PhysicalStats.page_count * 8 / 1024.0) AS [Total Index Size (MB)]
        ,CONVERT(decimal(18,2), PhysicalStats.avg_fragmentation_in_percent) AS [Fragmentation (%)]
        ,-1 AS [Row Count]
        ,-1 AS [Index Size Per Row (Bytes)]
        ,0 AS [Appears In Usage Stats Table]

    FROM SYS.INDEXES Indexes

    INNER JOIN SYS.OBJECTS Objects 
        ON Indexes.OBJECT_ID = Objects.OBJECT_ID

    LEFT JOIN sys.dm_db_index_physical_stats(@dbid, null, null, null, null) PhysicalStats
        ON PhysicalStats.object_id = Indexes.object_id AND PhysicalStats.index_id = indexes.index_id

    INNER JOIN sys.databases Databases
        ON Databases.database_id = PhysicalStats.database_id

    WHERE 
        Objects.type = 'U' -- Is User Table

        -- exclude heap indexes
        AND Indexes.name IS NOT NULL

        -- exclude empty tables
        AND PhysicalStats.page_count <> 0

        -- Exclude primary keys, which should not be removed
        AND Indexes.is_primary_key = 0

        -- ignore unique constraints - those shouldn't be removed 
        AND Indexes.is_unique_constraint = 0 
        AND Indexes.is_unique = 0

        AND Indexes.INDEX_ID NOT IN 
        (
            SELECT UsageStats.INDEX_ID
            FROM SYS.DM_DB_INDEX_USAGE_STATS UsageStats
            WHERE 
                UsageStats.OBJECT_ID = Indexes.OBJECT_ID
                AND Indexes.INDEX_ID = UsageStats.INDEX_ID
                AND DATABASE_ID = @dbid
        )
)

ORDER BY [Table] ASC, [Total Index Size (MB)] DESC


-------------
------script3
-------------

WITH cte AS (
    SELECT 
		'['+ c.name + '].[' + o.name + ']' AS TableName,
    	DB_NAME(s.database_id) as [database],
    	i.name AS IndexName,
    	s.user_scans as u_scans,
    	s.user_seeks as u_seeks,
    	s.user_lookups as u_lookups,
    	s.user_updates as u_updates,
    	i.index_id AS IndexID,   
    	user_seeks + user_scans + user_lookups AS Reads,
    	user_updates AS Writes,

    	(
    		SELECT SUM(p.rows) 
    		FROM sys.partitions p 
    		WHERE p.index_id = s.index_id 
    			AND s.object_id = p.object_id
    	) AS TotalRows,
    	CASE
    		WHEN s.user_updates < 1 THEN 100
    		ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) 
    			/ s.user_updates
    	END AS ReadsPerWrite,
    	'DROP INDEX ' + QUOTENAME(i.name) 
    		+ ' ON ' + QUOTENAME(c.name) 
    		+ '.' + QUOTENAME(OBJECT_NAME(s.object_id)) 
    		AS 'DropSQL'
    FROM sys.dm_db_index_usage_stats s  
    INNER JOIN sys.indexes i ON i.index_id = s.index_id 
    	AND s.object_id = i.object_id   
    INNER JOIN sys.objects o on s.object_id = o.object_id
    INNER JOIN sys.schemas c on o.schema_id = c.schema_id
    WHERE OBJECTPROPERTY(s.object_id,'IsUserTable') = 1
    	--AND s.database_id = DB_ID()   
    	AND i.type_desc = 'nonclustered'
    	AND i.is_primary_key = 0
    	AND i.is_unique_constraint = 0
    AND 
    (
    	SELECT SUM(p.rows) 
    	FROM sys.partitions p 
    	WHERE p.index_id = s.index_id 
    		AND s.object_id = p.object_id
    ) > 10000
)
SELECT * FROM cte
where u_seeks <= 10
and u_scans <= 10
and u_lookups <= 10
order by u_updates desc
/*
TableName   Name  ID Reads   Writes Rows  ReadsPerWrite DropSQL
----------  ----- -- ------- ------ ----- ------------- -------
[dbo].[t1]  IDX_1 20 1227972 996081 78599 1.23280335635 DROP ..
[dbo].[t2]  IDX_2 21 51359   33912  78599 1.51447865062 DROP ..
[dbo].[t3]  IDX_3 22 235280  159808 78599 1.47226672006 DROP ..
*/



SELECT DB_NAME(database_id) as [database], 
OBJECT_NAME(object_id) as [object_name] , 
object_id as objectid,
index_id,    
user_seeks,      
user_scans,      
user_lookups,    
user_updates,    
last_user_seek,     
last_user_scan,     
last_user_lookup,   
last_user_update,   
system_seeks,    
system_scans,    
system_lookups,  
system_updates,  
last_system_seek,   
last_system_scan,   
last_system_lookup
FROM SYS.DM_DB_INDEX_USAGE_STATS
where user_seeks <= 10
and user_scans <= 10
and user_lookups <=10
order by user_updates desc
